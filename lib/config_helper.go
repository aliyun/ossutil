package lib

import (
	"fmt"
	"os"
	"strconv"
	"strings"

	configparser "github.com/alyu/configparser"
)

// sections in config file
const (
	CREDSection string = "Credentials"

	BucketEndpointSection string = "Bucket-Endpoint"

	BucketCnameSection string = "Bucket-Cname"

	AkServiceSection string = "AkService"

	DefaultSection string = "Default"
)

// config items in section AKSerivce
const (
	ItemEcsAk string = "ecsAk"
)

// config items in section Credentials
const (
	ItemRamRoleArn string = "ramRoleArn"
)

type configOption struct {
	showNames     []string
	cfInteractive bool
	reveal        bool
	helpChinese   string
	helpEnglish   string
}

// CredOptionList is all options in Credentials section
var CredOptionList = []string{
	OptionLanguage,
	OptionEndpoint,
	OptionAccessKeyID,
	OptionAccessKeySecret,
	OptionSTSToken,
	OptionOutputDir,
	OptionRamRoleArn,
	OptionUserAgent,
}

// CredOptionMap allows alias name for options in Credentials section
// name, allow to show in screen
var CredOptionMap = map[string]configOption{
	OptionLanguage:        configOption{[]string{"language", "Language"}, false, true, "", ""},
	OptionEndpoint:        configOption{[]string{"endpoint", "host"}, true, true, "", ""},
	OptionAccessKeyID:     configOption{[]string{"accessKeyID", "accessKeyId", "AccessKeyID", "AccessKeyId", "access_key_id", "access_id", "accessid", "access-key-id", "access-id"}, true, false, "", ""},
	OptionAccessKeySecret: configOption{[]string{"accessKeySecret", "AccessKeySecret", "access_key_secret", "access_key", "accesskey", "access-key-secret", "access-key"}, true, false, "", ""},
	OptionSTSToken:        configOption{[]string{"stsToken", "ststoken", "STSToken", "sts_token", "sts-token"}, true, false, "", ""},
	OptionOutputDir:       configOption{[]string{"outputDir", "output-dir", "output_dir", "output_directory"}, false, true, "ossutil生成的文件的输出目录, ", "the directory to store files generated by ossutil, "},
	OptionECSRoleName: configOption{[]string{"ecsRoleName", "EcsRoleName", "ecsrolename", "ecs-role-name", "ecs_role_name"}, true, false,
		"表示角色名，主要用于EcsRamRole模式",
		"specifies the authentication mode, primarily used in EcsRamRole mode."},
	OptionTokenTimeout: configOption{[]string{"tokenTimeOut", "tokenTimeout", "tokentimeout", "token_timeout", "token-timeout"}, true, false,
		"表示token的有效时间，单位为秒, 缺省值为3600，主要用于RamRoleArn模式下的AssumeRole参数",
		"specifies the valid time of a token, the unit is: s, default value is 3600, primarily used for AssumeRole parameters in RamRoleArn mode"},
	OptionRamRoleArn: configOption{[]string{"ramRoleArn", "RamRoleArn", "ramrolearn", "ram_role_arn", "ram-role-arn"}, true, false,
		"表示RAM角色的ARN，主要用于RamRoleArn模式",
		"specifies the ARN of ram role, primarily used in RamRoleArn mode."},
	OptionRoleSessionName: configOption{[]string{"roleSessionName", "RoleSessionName", "rolesessionname", "role-session-name", "role_session_name"}, true, false,
		"表示会话名字，主要用于RamRoleArn模式",
		"specifies the session name, primarily used in RamRoleArn mode."},
	OptionSTSRegion: configOption{[]string{"stsRegion", "stsregion", "sts-region", "sts_region"}, true, false,
		"指定sts endpoint的地区，比如cn-shenzhen，其中，cn指代的是国家，shenzhen指代的是地区，用于构造sts endpoint，该选项缺省时，sts endpoint为sts.aliyuncs.com，主要用于RamRoleArn模式",
		"specifies the region of sts endpoint, such as cn-shenzhen, in this case, cn refers to the country and shenzhen refers to the region, to construct sts endpoint, when this option defaults, the sts endpoint is sts.aliyuncs.com, primarily used in RamRoleArn mode."},
}

// DefaultOptionMap allows alias name for options in default section
// name, allow to show in screen
var DefaultOptionMap = map[string]configOption{
	OptionUserAgent: configOption{[]string{"userAgent", "useragent", "user-agent", "user_agent"}, true, false,
		"指定http请求中的user agent, 会在缺省值后面加上指定值",
		"Specify the user agent in the http request, and the specified value will be added after the default value"},
	OptionLogLevel: configOption{[]string{"loglevel", "log-level", "log_level"}, true, false,
		"日志级别，默认为空,表示不输出日志文件,可选值为:info|debug,info输出提示信息日志,debug输出详细信息日志(包括http请求和响应信息)",
		"log level,default is empty(no log file output),optional value is:info|debug,info will output information logs,debug will output detail logs(including http request and response logs)"},
	OptionProxyHost: configOption{[]string{"proxyHost", "proxyhost", "proxy-host", "proxy_host"}, true, false,
		"网络代理服务器的url地址,支持http/https/socks5,比如 https://120.79.128.211:3128, socks5://120.79.128.211:1080",
		"url of network proxy server, which supports http/https/socks5, such as https://120.79.128.211:3128, socks5://120.79.128.211:1080"},
	OptionProxyUser: configOption{[]string{"proxyUser", "proxyuser", "proxy-user", "proxy_user"}, true, false,
		"网络代理服务器的用户名,默认为空",
		"username of network proxy, default is empty"},
	OptionProxyPwd: configOption{[]string{"proxyPwd", "proxypwd", "proxy-pwd", "proxy_pwd"}, true, false,
		"网络代理服务器的密码,默认为空",
		"password of network proxy, default is empty"},
	OptionMode: configOption{[]string{"mode"}, true, false,
		"表示鉴权模式，取值可以为AK，StsToken，RamRoleArn，EcsRamRole，缺省值为空",
		"specifies the authentication mode, the value can be AK，StsToken，RamRoleArn，EcsRamRole, default value is empty."},
	OptionECSRoleName: configOption{[]string{"ecsRoleName", "EcsRoleName", "ecsrolename", "ecs-role-name", "ecs_role_name"}, true, false,
		"表示角色名，主要用于EcsRamRole模式",
		"specifies the authentication mode, primarily used in EcsRamRole mode."},
	OptionTokenTimeout: configOption{[]string{"tokenTimeOut", "tokenTimeout", "tokentimeout", "token_timeout", "token-timeout"}, true, false,
		"表示token的有效时间，单位为秒, 缺省值为3600，主要用于RamRoleArn模式下的AssumeRole参数",
		"specifies the valid time of a token, the unit is: s, default value is 3600, primarily used for AssumeRole parameters in RamRoleArn mode"},
	OptionRamRoleArn: configOption{[]string{"ramRoleArn", "RamRoleArn", "ramrolearn", "ram_role_arn", "ram-role-arn"}, true, false,
		"表示RAM角色的ARN，主要用于RamRoleArn模式",
		"specifies the ARN of ram role, primarily used in RamRoleArn mode."},
	OptionRoleSessionName: configOption{[]string{"roleSessionName", "RoleSessionName", "rolesessionname", "role-session-name", "role_session_name"}, true, false,
		"表示会话名字，主要用于RamRoleArn模式",
		"specifies the session name, primarily used in RamRoleArn mode."},
	OptionReadTimeout: configOption{[]string{"readTimeOut", "readtimeout", "read-timeout", "read_timeout"}, true, false,
		"表示客户端读超时的时间，单位为秒, 缺省值为1200",
		"specifies the time that the client read timed out, the unit is: s, default value is 1200."},
	OptionConnectTimeout: configOption{[]string{"connectTimeOut", "connectTimeout", "connecttimeout", "connect-timeout", "connect_timeout"}, true, false,
		"表示客户端连接超时的时间，单位为秒, 缺省值为120",
		"specifies the time that the client connection timed out, the unit is: s, default value is 120."},
	OptionSTSRegion: configOption{[]string{"stsRegion", "stsregion", "sts-region", "sts_region"}, true, false,
		"指定sts endpoint的地区，比如cn-shenzhen，其中，cn指代的是国家，shenzhen指代的是地区，用于构造sts endpoint，该选项缺省时，sts endpoint为sts.aliyuncs.com，主要用于RamRoleArn模式",
		"specifies the region of sts endpoint, such as cn-shenzhen, in this case, cn refers to the country and shenzhen refers to the region, to construct sts endpoint, when this option defaults, the sts endpoint is sts.aliyuncs.com, primarily used in RamRoleArn mode."},
	OptionRetryTimes: configOption{[]string{"retryTimes", "retrytimes", "retry-times", "retry_times"}, true, false,
		"指定发生错误后的重试次数。取值范围为1~500，缺省值为120。",
		"Specifies the number of retries after an error occurs. The value range is 1~500, and the default value is 120."},
	OptionSignVersion: configOption{[]string{"signVersion", "signversion", "sign-version", "sign_version"}, true, false,
		"http请求使用的签名算法版本, 缺省为空, 表示v1版本",
		"The version of the signature algorithm used in the HTTP request. It is empty by default, indicating the V1 version"},
	OptionRegion: configOption{[]string{"region"}, true, false,
		"bucket所在的地区, 比如cn-hangzhou, 缺省值为空, 如果使用v4签名则必须传入",
		"The region where the bucket is located, such as cn-hangzhou. The default value is empty. If V4 signature is used, it must be inputted"},
	OptionCloudBoxID: configOption{[]string{"cloudBoxID", "cloudBoxId", "cloudboxid", "cloud-box-id", "cloud_box_id"}, true, false,
		"云盒的id，缺省值为空，适用于云盒场景",
		"The ID of the cloud box. The default value is empty. It is applicable to cloud box scenarios"},
}

// DecideConfigFile return the config file, if user not specified, return default one
func DecideConfigFile(configFile string) string {
	if configFile == "" {
		configFile = DefaultConfigFile
	}

	if len(configFile) >= 2 && strings.HasPrefix(configFile, "~"+string(os.PathSeparator)) {
		homeDir := currentHomeDir()
		if homeDir != "" {
			configFile = strings.Replace(configFile, "~", homeDir, 1)
		}
	}
	return configFile
}

// LoadConfig load the specified config file
func LoadConfig(configFile string) (OptionMapType, error) {
	var configMap OptionMapType
	var err error
	configMap, err = readConfigFromFile(configFile)
	if err != nil {
		return nil, fmt.Errorf("Read config file error: %s, please try \"help config\" to set configuration or use \"--config-file\" option", err)
	}
	if err = checkConfig(configMap); err != nil {
		return nil, err
	}
	return configMap, nil
}

func readConfigFromFile(configFile string) (OptionMapType, error) {
	configFile = DecideConfigFile(configFile)

	config, err := configparser.Read(configFile)
	if err != nil {
		return nil, err
	}

	configMap := OptionMapType{}

	// get options in Default Section
	defaultSection, err := config.Section(DefaultSection)
	if err == nil {
		defaultOptions := defaultSection.Options()
		for name, option := range defaultOptions {
			if opName, ok := getOptionNameByDefault(strings.TrimSpace(name)); ok {
				configMap[strings.TrimSpace(opName)] = strings.TrimSpace(option)
			}
		}
	}

	// get options in cred section
	credSection, err := config.Section(CREDSection)
	if err != nil {
		return nil, err
	}

	credOptions := credSection.Options()

	//added
	//configMap[CREDSection] = map[string]string{}

	for name, option := range credOptions {
		if opName, ok := getOptionNameByStr(strings.TrimSpace(name)); ok {
			configMap[strings.TrimSpace(opName)] = strings.TrimSpace(option)
		} else {
			configMap[strings.TrimSpace(name)] = strings.TrimSpace(option)
		}
	}

	// get options in pair sections
	for _, sec := range []string{BucketEndpointSection, BucketCnameSection} {
		if section, err := config.Section(sec); err == nil {
			configMap[sec] = map[string]string{}
			options := section.Options()
			for bucket, host := range options {
				(configMap[sec]).(map[string]string)[strings.TrimSpace(bucket)] = strings.TrimSpace(host)
			}
		}
	}

	// get options in AKService for user-defined GetAk
	sec := AkServiceSection
	if section, err := config.Section(sec); err == nil {
		configMap[sec] = map[string]string{}
		options := section.Options()
		for ecsUrl, strUrl := range options {
			(configMap[sec]).(map[string]string)[strings.TrimSpace(ecsUrl)] = strings.TrimSpace(strUrl)
		}
	}

	return configMap, nil
}

func getOptionNameByStr(name string) (string, bool) {
	for optionName, option := range CredOptionMap {
		for _, val := range option.showNames {
			if strings.EqualFold(name, val) {
				return optionName, true
			}
		}
	}
	return "", false
}

func getOptionNameByDefault(name string) (string, bool) {
	for optionName, option := range DefaultOptionMap {
		for _, val := range option.showNames {
			if strings.EqualFold(name, val) {
				return optionName, true
			}
		}
	}
	return "", false
}

func checkConfig(configMap OptionMapType) error {
	for name, opval := range configMap {
		if option, ok := OptionMap[name]; ok {
			if option.optionType == OptionTypeInt64 {
				if _, err := strconv.ParseInt(opval.(string), 10, 64); err != nil {
					return fmt.Errorf("error value of option \"%s\", the value is: %s in config file, which needs int64 type", name, opval)
				}
			}
			if option.optionType == OptionTypeAlternative {
				vals := strings.Split(option.minVal, "/")
				if FindPosCaseInsen(opval.(string), vals) == -1 {
					return fmt.Errorf("error value of option \"%s\", the value is: %s in config file, which is not anyone of %s", name, opval, option.minVal)
				}
			}
		}
	}
	return nil
}
